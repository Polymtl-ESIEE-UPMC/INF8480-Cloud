heat_template_version: 2014-10-16

description: A template to deploy a load balanced web server

parameters:

  image:
    type: string
    description: Image utilisee pour les serveurs
    default: INF4410-Ubuntu-trusty-mini
    constraints:
      - custom_constraint: glance.image

  flavor:
    type: string
    description: Flavor utilisee par les serveurs
    default: INF4410-mini
    constraints:
      - custom_constraint: nova.flavor

  subnet_id:
    type: string
    description: Sous-reseau dans lequel le load balancer sera situe
    default: 6579eb07-88c3-4707-9c6e-ab90a78cca02
    constraints:
      - custom_constraint: neutron.subnet

  key_name:
    type: string
    description: j'ai aucune idée c'est quoi
    default: TP3
    constraints:
      - custom_constraint: nova.keypair

  subnet:
    type: string
    description: nom du sous-réseau
    default: inf4410-net

  ext_subnet_id:
    type: string
    description: id du sous-réseau externe
    default: 0c3b1354-d3d5-4fec-86d3-19d4d1f13785

  scriptlink:
    type: string
    description: lien vers le script python
    default: https://raw.githubusercontent.com/houssemmh/INF8480-TP3/master/server.py

resources:
  server_nodes:
      type: OS::Heat::ResourceGroup
      properties:
        count: 2
        resource_def:
          type: OS::Nova::Server
          properties:
            # create a unique name for each server
            # using its index in the group
            name: Web Server%index%
            key_name: { get_param: key_name }
            image: { get_param: image }
            flavor: { get_param: flavor }
            networks: [{network: {get_param: subnet} }]
            user_data_format: RAW
            user_data:
              str_replace:
                template: |
                  #!/bin/bash
                  wget scriptlink
                  python server.py
                params:
                  scriptlink: {get_param: scriptlink}

  mypool:
      type: OS::Neutron::Pool
      properties:
        lb_method: ROUND_ROBIN
        monitors: [{ get_resource: mymonitor }]
        protocol: TCP
        subnet: { get_param: subnet_id }
        vip:
          protocol_port: 8080

  myloadbalancer:
      type: OS::Neutron::LoadBalancer
      properties:
        members: { get_attr: [server_nodes, refs] }
        pool_id: { get_resource: mypool }
        protocol_port: 8080
  
  adresseipflottante:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: ext_subnet_id }
      port_id: { get_attr: [mypool, vip, port_id] }

  mymonitor:
      type: OS::Neutron::HealthMonitor
      properties:
        type: PING
        delay: 15
        max_retries: 2
        timeout: 5


outputs:
  pool_ip_address:
    value: {get_attr: [mypool, vip, address]}
    description: The IP address of the load balancing pool